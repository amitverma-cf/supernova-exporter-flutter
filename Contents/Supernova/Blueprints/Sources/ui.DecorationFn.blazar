{* param component: Component (may be null for abstract layout nodes) *}
{[ var c self.component /]}
{[ var animation nil /]}
{[ if @is.nil(c) ]} 
  {[ if @is.nonNil(self.componentId) ]}
    {* this branch allows standalone execution in editor *}
    {[ set c @project.componentById(componentId) /]}
    {[ set animation @project.animationByComponentId(componentId) /]}
  {[ else ]}
    {* fallback to case of null component *}
    {[ set c @new.dict() /]}
  {[/]}
{[/]}

{[if @is.nonNil(c.style) ]}
 {[ let decorationContext @new.dict("style", c.style).add("animation", animation) /]}
 {[ let background @call("ui.decoration.BackgroundColor", decorationContext) /]}
 {[ let gradient @call("ui.decoration.BackgroundGradient", decorationContext) /]}
 {[ let border @call("ui.decoration.Border", decorationContext) /]}
 {[ let shadow @call("ui.decoration.Shadow", decorationContext) /]}
 {[ let radius @call("ui.decoration.CornerRadius", decorationContext) /]}

 {[ var applyDecoration @or(background.apply, gradient.apply, shadow.apply, border.apply, radius.apply) /]}
 
 {[ if applyDecoration ]}
BoxDecoration(
  {* //todo: imageDecoration *}
  {[ if gradient.apply  ]}
    gradient: {{ gradient.output }},
  {[ elseif background.apply ]}
    color: {{ background.output }},
  {[/]}
  {[if border.apply ]} 
    border: {{ border.output }},
  {[/]}
  {[if radius.apply]}
    borderRadius: {{ radius.output }},
  {[/]}
  {[if shadow.apply]} 
    boxShadow: [ {{ shadow.output }} ],
   {[/]}
)
 {[/]}
 {[ return @new.dict("apply", applyDecoration) /]}
{[ else ]}
 {[ return @new.dict("apply", false) /]}
{[/]}