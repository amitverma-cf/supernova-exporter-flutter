{* param node: FlexboxNode *}
{* param parent: FlexboxNode *}

{[ var n node /]}
{[ var p parent /]}
{[ if @is.nil(n) ]} 
  {* this branch allows standalone execution in editor *}
  {[ var layout @compute.layout.flexboxForScreenById(screenId) /]}
  {[ set n layout.children.at(0) /]}
  {[ set p layout /]}
{[/]}

{[ var parentType "none" /]}
{*
{{ n.toJSON() }}
——
{{ p.group.toJSON() }}
 *}
{[ if @is.nonNil(p) ]}
  {[ set parentType p.type /]}
{[/]}

{[ var result @new.dict("apply", false).add("type", "") /]}

{[ switch parentType]}
{[ case "linear"]}
  {[ if @not(@is.equals(n.alignment, p.group.crossAxisAlignment)) ]}
    {[ switch p.group.direction]}
    {[ case "row"]}
       {[ switch n.alignment]}
         {[ case "start" ]}
         {[ set result @new.dict("apply", true).add("type", "topLeft") /]}
         {[ case "center" ]}
         {[ set result @new.dict("apply", true).add("type", "centerLeft") /]}
         {[ case "end" ]}
         {[ set result @new.dict("apply", true).add("type", "bottomLeft") /]}
       {[/]}
    {[ case "column"]}
       {[ switch n.alignment]}
         {[ case "start"]}
         {[ set result @new.dict("apply", true).add("type", "topLeft") /]}
         {[ case "center"]}
         {[ set result @new.dict("apply", true).add("type", "topCenter") /]}
         {[ case "end"]}
         {[ set result @new.dict("apply", true).add("type", "topRight") /]}
       {[/]}
    {[/]}
  {[/]}
{[default]}
 TODO: parent type {{parentType}}
{[/]}

{* —- result: {{ result.toJSON() }} *}
{[ return result /]}


