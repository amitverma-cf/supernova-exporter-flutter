{[ var prop animatedProperty /]}
{[ if @is.nil(prop) ]}
  {* debug branch *}
  {[ set prop @project.animationsForScreenId(screenId).first().elements.at(4).properties.at(0) /]}
{[/]}

{[ let valueType prop.valueType /]}
{[ var valueGenericType @call("animation.GenericType", prop).output /]}

{[ var interpolation "Interpolation<double>" /]}
{[ if @is.equals(valueType, "color") ]}
  {[ set interpolation "ColorInterpolation" /]}
{[ elseif @is.equals(valueType, "size") ]}
  {[ set interpolation "Interpolation<Offset>" /]}
{[/]}


Animation<{{ valueGenericType }}> _create{{ prop.animatedProperty.camelcased(true) }}Property(AnimationController animationController) {
     return {{ interpolation }}(
       keyframes: [
     {[ if prop.requiresDefaultKeyFrame ]}
       Keyframe<{{ valueGenericType }}>(
           fraction: 0,
           value: {[ inject "animation.ValueRender" context @new.dict("valueType", valueType).add("value", prop.defaultValue) /]},
       ),
     {[/]}
  {[ for kf in prop.keyframes ]}
     {[ let specialTime @and(@is.equals(kf.time, 0), prop.requiresDefaultKeyFrame) /]}
       Keyframe<{{ valueGenericType }}>(
           fraction: {{ @iif( specialTime, "0.00001", kf.time.subtractedBy(prop.beginTime).dividedBy(prop.duration).rounded(5) ) }},
           value: {[ inject "animation.ValueRender" context @new.dict("valueType", valueType).add("value", kf.value) /]},
       ),
  {[/]}
    ],
  ).animate(CurvedAnimation ( {* TODO: another 'timingType's ? *}
    curve: Interval(0, 1, 
      curve: Cubic(
        {[ let tf prop.timingFunction /]}
        {{ tf.timingCurveCP1.x.rounded(5) }},
        {{ tf.timingCurveCP1.y.rounded(5) }},
        {{ tf.timingCurveCP2.x.rounded(5) }},
        {{ tf.timingCurveCP2.y.rounded(5) }},
      )
    ),
    parent: animationController,
  )
 );
}


