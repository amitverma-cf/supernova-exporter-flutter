{[ var clazzName className /]}
{[ var elem element /]}
{[ if @is.nil(elem) ]} 
 {* debug branch *}
 {[ let animations @project.animationsForScreenId(screenId) /]}
 {[ set elem animations.first().elements.at(4) /]}
 {[ set clazzName "DebugAnimation1" /]}
{[/]}

{[ var props @new.array() /]}
{[ var requiresState false /]}
 
{[ for p in elem.properties ]}
  {[ inject "animation.PropertyFactory" context @new.dict("animatedProperty", p) /]}
  {[ let name p.animatedProperty.camelcased(false) /]}
  {[ let x @call("animation.isStateBased", p) /]}
  {[ var fix "1" /]}
  {[ if x.stateBased ]}
    {[ set requiresState true /]}
  {[/]}
  {[ set props props.append(@new.dict("name", name).add("stateBased", x.stateBased).add("prop", p)) /]}
{[/]} 

{[ if requiresState ]}
Widget _defaultBuilder(
        BuildContext context,
        {{ clazzName }}AnimationState animationState,
        Widget child) => child;
{[/]}

class {{clazzName}} extends StatelessWidget {

  {[for prop in props]}
  {[ var valueGenericType @call("animation.GenericType", prop.prop).output /]}
  final Animation<{{ valueGenericType }}> {{ prop.name }};
  {[/]}
  final Widget child;
  {[ if requiresState ]}
  final ValueWidgetBuilder<{{ clazzName }}AnimationState> builder;
  {[/]}
  {{clazzName}}({
    Key key,
    this.child,
    {[ if requiresState ]}
    this.builder = _defaultBuilder,
    {[/]}
    @required AnimationController animationController
  }) : assert(animationController != null),
    {[ for prop in props ]}
       this.{{ prop.name }} = _create{{ prop.name.camelcased(true) }}Property(animationController),
    {[/]}
       super(key: key);


  @override
  Widget build(BuildContext context) {
     return AnimatedBuilder(
      animation: Listenable.merge([
        {[ for prop in props ]}
        this.{{ prop.name }},
        {[/]}
      ]),
      child: this.child,
      builder: (context, widget) {
       {[ let types @new.array().append("scaleXY").append("scale").append("rotateX").append("rotateY").append("rotateZ").append("translateXY").append("opacity") /]}
       {[ var injections @new.array() /]}
       {[ for type in types.reversed() ]}
         {[ let i @new.dict("id", "animation.PropertyWrapper0").add("context", @new.dict("element", elem).add("type", type)) /]}
          {[ set injections injections.append(i) /]}
       {[/]}

        return 
        {[ inject "helpers.RecursiveInject" context @new.dict("injections", injections) ]}
          {[ if requiresState ]}
            this.builder(context, this._createAnimationState(), widget)
          {[ else ]}
             widget
           {[/]}
        {[/]};
      },
    );
  }
  {[ if requiresState ]}
    {{ clazzName }}AnimationState _createAnimationState() {
      return {{ clazzName }}AnimationState(
        {[ for prop in props ]}
          {[ if prop.stateBased ]}
            {{ prop.name }}: this.{{ prop.name }}.value,
          {[/]}
        {[/]}
      );
    }
  {[/]}
} 

{[ if requiresState ]}
  class {{ clazzName }}AnimationState {
  {* class properties *}
  {[ for prop in props ]}
    {[ if prop.stateBased ]}
      {[ var valueGenericType @call("animation.GenericType", prop.prop).output /]}
      final {{ valueGenericType }} {{ prop.name }};
    {[/]}
  {[/]}

 {* constructor *}
 {{ clazzName }}AnimationState({
  {[ for prop in props ]}
    {[ if prop.stateBased ]}
      this.{{ prop.name }},
    {[/]}
  {[/]}
  });
 }
{[/]}


