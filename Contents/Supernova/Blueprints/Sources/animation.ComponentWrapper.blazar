{* param componentId: string *}
{* param decoration: dict *}
{* param dimensions: dict *}
{[ var animations @new.dict() /]}
{[ var body #body /]}
{[ var decor @new.dict("apply", false) /]} 
{[ var dim @new.dict("apply", false) /]}
{[ if @is.defined(COMPONENT_ANIMATIONS) ]}
  {[ set animations COMPONENT_ANIMATIONS /]}
  {[ set decor decoration /]}
  {[ set dim dimensions /]}
{[ else ]}
  {[ let testAnimation @new.dict("animationClassName", "WelcomeWidgetAnimation1Element3").add("controllerName", "conquerTheStarsAnimationController").add("isStateBased", true) /]}
  {[ set animations @new.dict("0iR-Me-K6I", testAnimation) /]}
  {[ set body "BODY" /]}
  {[ set decor @new.dict("apply", true).add("output", "DECOR") /]} 
  {[ set dim @new.dict("apply", true).add("output", "wh: 69,") /]}
{[/]}
{[ let animation animations.value(componentId) /]}
{[ if @is.nonNil(animation) ]}
{{ animation.animationClassName }} (
  animationController: this.{{ animation.controllerName }},
  {[ if animation.isStateBased ]}
    {[ if decor.apply ]}
	  {* apply decoration and dimensions, no insets *}
      builder: (context, state, widget) {
        return {[ inject "layout.Container" context @new.dict("dimensions", dim).add("decoration",  decor) ]} widget {[/]}; 
      },
      child: {{ body }},
    {[ else ]} 
     {* decoration is consumed by component itself *}
     builder: (context, state, widget) {
       return {{ body }}; 
     }
    {[/]}
  {[ else ]} 
    {* not state-based animation *}
    child: {{ body }},
  {[/]}
)
{[ else ]}
{{ body }}
{[/]}