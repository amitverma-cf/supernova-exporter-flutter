{* param node: FlexboxNode, parent: FlexboxNode? *}
{*  param reading *}
{[ var body "" /]}
{[ var n node /]}
{[ var p parent /]}
{[ if @is.nonNil(n) ]}
 {[ set body #body /]}
{[ else ]}
 {* debug branch for running in editor *}
 {[ var layout @compute.layout.flexboxForScreenById(screenId) /]}
 {[ set n layout /]}
 {[ set p layout.nonExisting /]}
 {[ set body n.componentId.uppercased().extended("'", "'") /]}
{[/]}

{* compute widget properties *}
{[ var decoration @call("ui.DecorationFn", @new.dict("componentId", n.componentId)) /]}
{[ var insets @call("layout.InsetsFn", @new.dict("node", n)) /]}
{[ var dimensions @call("layout.DimensionsFn", @new.dict("node", n)) /]}
{[ var alignment @call("layout.AlignmentFn", @new.dict("node", n).add("parent", p)) /]}
{[ var opacity @new.dict("apply", false) /]}
{[ var flex @new.dict("apply", false) /]}
{[ if @is.nonNil(n.flex) ]}
  {[ set flex @new.dict("apply", true).add("value", n.flex) /]}
{[/]}
{[ var animation @new.dict("hasAnimation", false) /]}
{[ if @is.nonNil(n.componentId) ]}
  {[ var c @project.componentById(n.componentId) /]}
  {[ set opacity @new.dict("apply", @is.lt(c.style.opacity, 1)).add("value", c.style.opacity) /]}
  {[ set animation @call("animation.ComponentAnimationFn", @new.dict("componentId", n.componentId)) /]}

  {[ if @call("ui.isConsumesDecorationFn", @new.dict("component", c)).consumesDecoration ]}
   {[ set decoration @new.dict("apply", false) /]}
  {[/]}
{[/]}

{* ============== build wrappers chain ============== *}
{[ var wrappers @new.array() /]}
{* flex/expanded *}
{[ if flex.apply ]}
  {[ set wrappers wrappers.append(@new.dict("id", "layout.ExpandedWrapper").add("context", @new.dict("flex", flex))) /]}
{[/]}

{* opacity *}
{[ if opacity.apply ]}
  {[ set wrappers wrappers.append(@new.dict("id", "ui.OpacityWrapper").add("context", @new.dict("opacity", opacity))) /]}
{[/]}

{* alignment *}
{[ set wrappers wrappers.append(@new.dict("id", "layout.AlignmentWrapper").add("context", @new.dict("alignment", alignment))) /]}

{* animation *}
{[ if animation.hasAnimation ]}
  {* special wraper start *}
  {[ var specialWrapperContext @new.dict() /]}
  {[ if insets.apply ]}
    {* insets must be 'above' animation *}
    {[ set specialWrapperContext specialWrapperContext.add("insets", insets) /]}
    {[ set insets @new.dict("apply", false) /]}
  {[/]}
  {* if component manages its decoration itself, it may need to be wrapped with dimensions *}
  {[ let needDimensionWrapper @and(dimensions.apply, animation.isStateBased, @not(decoration.apply)) /]}
  {[ if needDimensionWrapper ]}
	{[ set specialWrapperContext specialWrapperContext.add("dimensions", dimensions) /]}
    {[ set dimensions @new.dict("apply", false) /]}
  {[/]}
  {[ if @is.gt(specialWrapperContext.count(), 0) ]}
    {[ set wrappers wrappers.append(@new.dict("id", "layout.Container").add("context", specialWrapperContext)) /]}
  {[/]}
  {* special wraper end *}

  {[ var animationContext @new.dict("componentId", n.componentId).add("decoration", decoration).add("dimensions", dimensions) /]}
  {[ if animation.isStateBased ]}
    {[ if decoration.apply ]} 
     {* this component does not manage its decoration - consume both decoration and dimensions *}
      {[ set decoration @new.dict("apply", false) /]}
      {[ set dimensions @new.dict("apply", false) /]}
    {[ else ]} 
      {* this is button - it manages decoration by itself and does not consume dimensions *}
    {* BUTTON! {{animationContext.toJSON() }} *}
    {[/]}
  {[/]}
  {[ set wrappers wrappers.append(@new.dict("id", "animation.ComponentWrapper").add("context", animationContext)) /]}
{[/]}

{* remaning props *}
{[ let needContainer @or(decoration.apply, insets.apply, dimensions.apply) /]}
{[ if needContainer ]}
  {[ set wrappers wrappers.append( @new.dict("id", "layout.Container").add("context", @new.dict("dimensions", dimensions).add("decoration", decoration).add("insets", insets))) /]}
{[/]}

{* render wrappers chain *}
{[ inject "helpers.RecursiveInject" context @new.dict("injections", wrappers) ]}
{{   body }}
{[/]}
